{
  "name": "ngmin",
  "description": "AngularJS Minifier",
  "version": "0.3.0",
  "author": {
    "name": "Brian Ford"
  },
  "license": "MIT",
  "main": "main.js",
  "dependencies": {
    "escodegen": "~0.0.15",
    "esprima": "~1.0.2",
    "commander": "~1.1.1"
  },
  "devDependencies": {
    "should": "~1.2.1",
    "mocha": "~1.5.0"
  },
  "keywords": [
    "angularjs",
    "minifier"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/btford/ngmin"
  },
  "bin": {
    "ngmin": "./bin/ngmin"
  },
  "scripts": {
    "test": "mocha"
  },
  "readme": "# ngmin\n[![Build Status](https://travis-ci.org/btford/ngmin.png?branch=master)](https://travis-ci.org/btford/ngmin)\n\nngmin is an _experimental_ AngularJS application minifier. Experimental means this **should not** yet be used in production, but you **should** try it out and let me know what you think. The goal is ultimately to use this alongside yeoman and grunt to make developing and building Angular apps fast, easy, and fun.\n\n## Installation\nInstall via npm:\n```bash\nnpm install -g ngmin\n```\n\n## CLI Usage\n\n```bash\nngmin somefile.js somefile.annotate.js\n```\n\nFrom here, you can concat and pass the annotated files to a minifier. Future versions of ngmin will include a minifier, probably based on Google Closure Compiler.\n\n## Conventions\nngmin does not currently attempt to be fully generalized. If you follow these conventions, which are largely the same as what the AngularJS Yeoman generators are configured to do, you should be fine.\n\n### Module Declaration\n\n```javascript\n// like this\nangular.module('myModuleName', ['dependOnThisModule']);\n```\n\n### Controller Declaration\n\n```javascript\n// like this\nangular.module('myModuleName').controller('MyCtrl', function ($scope) {\n  // ...\n});\n```\n\n### Service Declaration\nThis should work for all injectable APIs.\n\n```javascript\n// like this\nangular.module('myModuleName').service('MyCtrl', function ($scope) {\n  // ...\n});\n```\n\n## Conceptual Overview\nAngularJS's DI system inspects function parameters to determine what to inject:\n```javascript\n// angular knows to inject \"myService\" based on the parameter in \"myFactory\"\nsomeModule.factory('myFactory', function (myService) {\n  // ...\n});\n```\nAngularJS does this for `Module#controller`, `Module#service`, `Module#factory`, etc. Check out the [developer guide on DI](http://docs.angularjs.org/guide/di) for more info.\n\nJavaScript minifiers rename function parameters. The code above, when minified, might look like this:\n```javascript\n// the \"myService\" parameter has been renamed to \"a\" to save precious bytes\nsomeModule.factory('myFactory', function (a) {\n  // ...\n});\n```\n\nTo overcome this, AngularJS has a minifier-safe \"inline\" notation (see [Inline Annotation](http://docs.angularjs.org/guide/di) in the docs) that annotates `angular.controller`, `angular.service`, `angular.factory` with an array of dependencies' names as strings:\n```javascript\n// angular knows to inject \"myService\" based on the parameter in \"myFactory\"\nsomeModule.factory('myFactory', ['myService', function (myService) {\n  // ...\n}]);\n```\n\nSo with this notation, when minified, still includes the correct dependency names even if the function arguments are re-written:\n```javascript\nsomeModule.factory('myFactory', ['myService', function (a) {\n  // minified variable \"a\" will represent \"myService\"\n  // ...\n}]);\n```\n\nWriting the \"minifier-safe\" version by hand is kind of annoying because you have to keep both the array of dependency names and function parameters in sync.\n",
  "readmeFilename": "README.md",
  "_id": "ngmin@0.3.0",
  "_from": "ngmin@~0.3.0"
}
